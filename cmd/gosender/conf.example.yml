# Provider accounts configuration
accounts:
  # SMS Providers
  - provider: sms
    subtype: aliyun
    name: aliyun-main
    api_key: "LTAI4G..." # AccessKey ID
    api_secret: "xxx..." # AccessKey Secret
    sign_name: "MyApp"
    region: "cn-hangzhou"
    enabled: true
    weight: 10
    # 使用方式:
    # 文本短信: gosender send --provider sms --sub-provider aliyun --to "***REMOVED***" --content "您的验证码是1234"
    # 可以通过metadata传递额外参数: --metadata region=cn-hangzhou,sign_name=MyApp

  - provider: sms
    subtype: tencent
    name: tencent-backup
    api_key: "AKIDxxx..." # SecretId
    api_secret: "xxx..." # SecretKey
    sign_name: "MyApp"
    app_id: "1400xxx"
    region: "ap-guangzhou"
    enabled: true
    weight: 5
    # 使用方式:
    # 文本短信: gosender send --provider sms --sub-provider tencent --to "***REMOVED***" --content "您的验证码是1234"
    # 模板短信: gosender send --provider sms --sub-provider tencent --to "***REMOVED***" --message-type template --template-id "123456" --template-params "code=1234,time=5" --metadata params_order='["1234","5"]'

  - provider: sms
    subtype: volc
    name: volcengine-sms
    api_key: "xxxx" # Access Key
    api_secret: "XXX" # Secret Key
    sign_name: "成都***REMOVED***"
    app_id: "xxxx"
    enabled: true
    weight: 10
    # 使用方式:
    # 文本短信: gosender send --provider sms --sub-provider volc --to "***REMOVED***" --message-type text --content "您的验证码是1234"
    # 使用模板: gosender send --provider sms --sub-provider volc --to "***REMOVED***" --message-type text --template-id "ST_xxx" --template-params "code=123456"

  - provider: sms
    subtype: huawei
    name: huawei-sms
    api_key: "xxx" # App Key
    api_secret: "xxx" # App Secret
    sign_name: "MyApp"
    sender: "10690xxx"
    enabled: false
    weight: 3
    # 使用方式:
    # 文本短信: gosender send --provider sms --sub-provider huawei --to "***REMOVED***" --content "您的验证码是1234"
    # 模板短信: gosender send --provider sms --sub-provider huawei --to "***REMOVED***" --message-type template --template-id "SMS_001" --template-params "code=1234,time=5"
    # 语音短信: gosender send --provider sms --sub-provider huawei --to "***REMOVED***" --message-type voice --content "1234"
    # 平台特定参数: --metadata sender=1069xxx,signature=MySign,status_callback=http://example.com/callback

  # Email Providers
  - provider: email
    name: smtp-gmail
    host: "smtp.gmail.com"
    port: 587
    api_key: "user@gmail.com" # Username
    api_secret: "app_password" # App Password
    from: "noreply@myapp.com"
    enabled: true
    weight: 10

  - provider: email
    name: smtp-outlook
    host: "smtp-mail.outlook.com"
    port: 587
    api_key: "user@outlook.com"
    api_secret: "password"
    from: "noreply@myapp.com"
    enabled: false
    weight: 5

  # DingTalk Bot
  - provider: dingtalk
    name: dingtalk-alerts
    api_key: "webhook_token_here" # 钉钉机器人的access_token
    api_secret: "secret_here" # 安全设置中的签名密钥(签名/加签时需要)
    enabled: true
    weight: 10
    # 目前支持的消息类型: text, markdown

  # Telegram Bot
  - provider: telegram
    name: telegram-bot
    api_key: "bot_token_here" # Telegram Bot API Token (从@BotFather获取)
    enabled: true
    weight: 10
    # 目前支持的消息类型: text
    # 使用时需要在--to参数指定chat_id

  # Lark (Feishu) Bot
  - provider: lark
    name: lark-notifications
    api_key: "webhook_token_here" # 飞书/Lark机器人的webhook地址中的token部分
    api_secret: "signing_secret" # 安全设置中的签名密钥(签名/加签时需要)
    enabled: true
    weight: 10
    # 目前支持的消息类型: text

  # WeComBot (Enterprise WeChat)
  - provider: wecombot
    name: wecom-alerts
    api_key: "webhook_key_here"
    enabled: true
    weight: 10

  # # Webhook Endpoints
  # - provider: webhook
  #   name: slack-webhook
  #   url: "https://hooks.slack.com/services/xxx/xxx/xxx"
  #   method: "POST"
  #   headers:
  #     Content-Type: "application/json"
  #     Authorization: "Bearer token_here"
  #   enabled: true
  #   weight: 10

  # - provider: webhook
  #   name: discord-webhook
  #   url: "https://discord.com/api/webhooks/xxx/xxx"
  #   method: "POST"
  #   headers:
  #     Content-Type: "application/json"
  #   enabled: true
  #   weight: 8

  # ServerChan
  - provider: serverchan
    name: serverchan-notify
    api_key: "SCT_YOUR_KEY"
    enabled: true
    weight: 5

  # EmailAPI Providers
  - provider: emailapi
    subtype: resend
    name: resend-api
    api_key: "re_xxx" # Resend API key
    from: "noreply@myapp.com"
    enabled: true
    weight: 10
    # 使用方式:
    # gosender send --provider emailapi --sub-provider resend --to "user@example.com" --subject "主题" --content "内容"
    # 发送HTML: gosender send --provider emailapi --sub-provider resend --to "user@example.com" --subject "主题" --content "<h1>内容</h1>" --message-type html

  - provider: emailapi
    subtype: emailjs
    name: emailjs-service
    api_key: "service_id" # EmailJS Service ID
    api_secret: "template_id" # EmailJS Template ID
    user_id: "user_id" # EmailJS User ID
    enabled: true
    weight: 8
    # 使用方式:
    # gosender send --provider emailapi --sub-provider emailjs --to "user@example.com" --subject "主题" --message-type template --template-id "template123" --template-params "name=John,company=Acme"

# Example CLI flag defaults (can be overridden by command line)
# These settings can also be set via environment variables with GO_SENDER_ prefix
# For example: GO_SENDER_OUTPUT=json, GO_SENDER_VERBOSE=true

# Default output format
output: console # console, json, yaml

# Default logging
verbose: false
log_level: DEBUG # DEBUG, INFO, WARN, ERROR

# Default provider selection strategy
# strategy: round_robin  # round_robin, weighted, failover

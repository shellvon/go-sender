# Provider accounts configuration
accounts:
  # SMS Providers
  - provider: sms
    subtype: aliyun
    name: aliyun-main
    api_key: "YOUR_ACCESS_KEY_ID" # AccessKey ID
    api_secret: "YOUR_ACCESS_KEY_SECRET" # AccessKey Secret
    sign_name: "YOUR_SIGN_NAME"
    region: "cn-hangzhou"
    enabled: true
    weight: 10
    # 使用方式:
    # 文本短信: gosender send --provider sms --sub-provider aliyun --to "1380013xxxx" --content "您的验证码是1234"
    # 可以通过metadata传递额外参数: --metadata region=cn-hangzhou,sign_name=MyApp

  - provider: sms
    subtype: tencent
    name: tencent-backup
    api_key: "YOUR_SECRET_ID" # SecretId
    api_secret: "YOUR_SECRET_KEY" # SecretKey
    sign_name: "YOUR_SIGN_NAME"
    app_id: "YOUR_APP_ID"
    region: "ap-guangzhou"
    enabled: true
    weight: 5
    # 使用方式:
    # 文本短信: gosender send --provider sms --sub-provider tencent --to "1380013xxxx" --content "您的验证码是1234"
    # 模板短信: gosender send --provider sms --sub-provider tencent --to "1380013xxxx" --message-type template --template-id "123456" --template-params "code=1234,time=5" --metadata params_order='["1234","5"]'

  - provider: sms
    subtype: volc
    name: volcengine-sms
    api_key: "YOUR_ACCESS_KEY" # Access Key
    api_secret: "YOUR_SECRET_KEY" # Secret Key
    sign_name: "YOUR_SIGN_NAME"
    app_id: "YOUR_APP_ID"
    enabled: true
    weight: 10
    # 使用方式:
    # 文本短信: gosender send --provider sms --sub-provider volc --to "138001xxxx" --message-type text --content "您的验证码是1234"
    # 使用模板: gosender send --provider sms --sub-provider volc --to "138001xxxx" --message-type text --template-id "YOUR_TEMPLATE_ID" --template-params "code=123456"
    # 火山引擎特定参数: --metadata sign_name=YOUR_SIGN_NAME,app_id=YOUR_APP_ID

  - provider: sms
    subtype: huawei
    name: huawei-sms
    api_key: "YOUR_APP_KEY" # App Key
    api_secret: "YOUR_APP_SECRET" # App Secret
    sign_name: "YOUR_SIGN_NAME"
    sender: "YOUR_SENDER"
    enabled: false
    weight: 3
    # 使用方式:
    # 文本短信: gosender send --provider sms --sub-provider huawei --to "1380013xxxx" --content "您的验证码是1234"
    # 模板短信: gosender send --provider sms --sub-provider huawei --to "1380013xxxx" --message-type template --template-id "SMS_001" --template-params "code=1234,time=5"
    # 语音短信: gosender send --provider sms --sub-provider huawei --to "1380013xxxx" --message-type voice --content "1234"
    # 平台特定参数: --metadata sender=YOUR_SENDER,signature=YOUR_SIGN,status_callback=http://example.com/callback

  # Email Providers
  - provider: email
    name: smtp-gmail
    host: "smtp.gmail.com"
    port: 587
    api_key: "YOUR_EMAIL" # Username
    api_secret: "YOUR_APP_PASSWORD" # App Password
    from: "YOUR_FROM_EMAIL"
    enabled: true
    weight: 10

  - provider: email
    name: smtp-outlook
    host: "smtp-mail.outlook.com"
    port: 587
    api_key: "YOUR_EMAIL"
    api_secret: "YOUR_PASSWORD"
    from: "YOUR_FROM_EMAIL"
    enabled: false
    weight: 5

  # DingTalk Bot
  - provider: dingtalk
    name: dingtalk-alerts
    api_key: "YOUR_WEBHOOK_TOKEN" # 钉钉机器人的access_token
    api_secret: "YOUR_SECRET_KEY" # 安全设置中的签名密钥(签名/加签时需要)
    enabled: true
    weight: 10
    # 目前支持的消息类型: text, markdown

  # Telegram Bot
  - provider: telegram
    name: telegram-bot
    api_key: "YOUR_BOT_TOKEN" # Telegram Bot API Token (从@BotFather获取)
    enabled: true
    weight: 10
    # 目前支持的消息类型: text
    # 使用时需要在--to参数指定chat_id

  # Lark (Feishu) Bot
  - provider: lark
    name: lark-notifications
    api_key: "YOUR_WEBHOOK_TOKEN" # 飞书/Lark机器人的webhook地址中的token部分
    api_secret: "YOUR_SIGNING_SECRET" # 安全设置中的签名密钥(签名/加签时需要)
    enabled: true
    weight: 10
    # 目前支持的消息类型: text

  # WeComBot (Enterprise WeChat)
  - provider: wecombot
    name: wecom-alerts
    api_key: "YOUR_WEBHOOK_KEY"
    enabled: true
    weight: 10

  # Webhook Endpoints
  - provider: webhook
    name: slack-webhook
    url: "https://hooks.slack.com/services/xxx/xxx/xxx"
    method: "POST"
    headers:
      Content-Type: "application/json"
      Authorization: "Bearer token_here"
    enabled: true
    weight: 10
    # 使用方式:
    # JSON内容: gosender send --provider webhook --account slack-webhook --content '{"text":"Hello, World!"}'
    # 普通文本: gosender send --provider webhook --account slack-webhook --content "Hello, World!"

  - provider: webhook
    name: discord-webhook
    url: "https://discord.com/api/webhooks/xxx/xxx"
    method: "POST"
    headers:
      Content-Type: "application/json"
    enabled: true
    weight: 8
    # 使用方式:
    # gosender send --provider webhook --account discord-webhook --content '{"content":"Hello from go-sender!"}'

  - provider: webhook
    name: custom-api
    url: "https://api.example.com/v1/endpoint/{id}"
    method: "PUT"
    headers:
      Content-Type: "application/json"
      X-API-KEY: "your-api-key"
    query_params:
      source: "gosender"
    enabled: true
    weight: 5
    # 使用方式:
    # 使用路径参数: gosender send --provider webhook --account custom-api --content '{"data":"value"}' --metadata path_params="id=123"

  # ServerChan
  - provider: serverchan
    name: serverchan-notify
    api_key: "YOUR_SERVERCHAN_KEY"
    enabled: true
    weight: 5

  # EmailAPI Providers
  - provider: emailapi
    subtype: resend
    name: resend-api
    api_key: "YOUR_RESEND_API_KEY" # Resend API key
    from: "YOUR_FROM_EMAIL"
    enabled: true
    weight: 10
    # 使用方式:
    # gosender send --provider emailapi --sub-provider resend --to "user@example.com" --subject "主题" --content "内容"
    # 发送HTML: gosender send --provider emailapi --sub-provider resend --to "user@example.com" --subject "主题" --content "<h1>内容</h1>" --message-type html

  - provider: emailapi
    subtype: emailjs
    name: emailjs-service
    api_key: "YOUR_SERVICE_ID" # EmailJS Service ID
    api_secret: "YOUR_TEMPLATE_ID" # EmailJS Template ID
    user_id: "YOUR_USER_ID" # EmailJS User ID
    enabled: true
    weight: 8
    # 使用方式:
    # gosender send --provider emailapi --sub-provider emailjs --to "user@example.com" --subject "主题" --message-type template --template-id "YOUR_TEMPLATE_ID" --template-params "name=Your_Name,company=Your_Company"

# Example CLI flag defaults (can be overridden by command line)
# These settings can also be set via environment variables with GO_SENDER_ prefix
# For example: GO_SENDER_OUTPUT=json, GO_SENDER_VERBOSE=true

# Default output format
output: console # console, json, yaml

# Default logging
verbose: false
log_level: DEBUG # DEBUG, INFO, WARN, ERROR

# Default provider selection strategy
# strategy: round_robin  # round_robin, weighted, failover
